<?php

/**
 * @file
 * stanford_profile_styles.module
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\editor\Entity\Editor;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\Finder\Finder;

/**
 * Implements hook_page_attachments().
 */
function stanford_profile_styles_page_attachments(array &$attachments) {

  // Attach styles to front end pages.
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (!$is_admin) {
    $attachments['#attached']['library'][] = 'stanford_profile_styles/stanford_profile_styles';
    $attachments['#attached']['library'][] = 'stanford_profile_styles/paragraph.react_paragraphs';
    $attachments['#attached']['library'][] = 'stanford_profile_styles/layout';
  }

  // Get the node from the route.
  $node = \Drupal::routeMatch()->getParameter('node');

  // Not a node.. Then just continue.
  if (!$node instanceof NodeInterface) {
    return;
  }

  $node_type = $node->getType();
  $attachments['#attached']['library'][] = "stanford_profile_styles/node.$node_type";

  // Check for our type and add library if a match.
  if ($node_type == "stanford_page") {

    // Check if stanford page is using a particular layout.
    $layout_target = $node->get('layout_selection')->getValue();
    if (isset($layout_target[0]['target_id']) && $layout_target[0]['target_id'] == "stanford_basic_page_full") {
      $attachments['#attached']['library'][] = "stanford_profile_styles/node.stanford_page.layout.full-width";
    }
  }
}

/**
 * Implements hook_library_info_build().
 */
function stanford_profile_styles_library_info_build() {
  $libraries = [];
  $module_path = drupal_get_path('module', 'stanford_profile_styles');

  // Find all css files in the dist/css directory.
  $finder = new Finder();
  $finder->in("$module_path/dist/css")
    ->files()
    ->name('/.css$/');

  foreach ($finder->getIterator() as $file) {
    $local_path = str_replace("$module_path/", '', $file->getPath());

    $path_parts = explode('/', $local_path);
    // Remove `dist` and `css` parts.
    unset($path_parts[0], $path_parts[1]);

    // This is the directory the file lives in.
    $library_level = reset($path_parts);
    $bucket = next($path_parts);
    $lib = basename($file->getFilename(), '.css');

    // Build the library definition.
    $libraries[trim("$bucket.$lib", '. ')] = [
      'css' => [
        $library_level => [
          "$local_path/{$file->getFileName()}" => [],
        ],
      ],
    ];
  }
  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 */
function stanford_profile_styles_library_info_alter(&$libraries, $extension) {
  // Replace react_paragraphs field_formatter css with our own.
  if ($extension == "react_paragraphs" && isset($libraries["field_formatter"])) {
    unset($libraries['field_formatter']['css']['component']['js/build/css/react_paragraphs.field_formatter.css']);
    $libraries['field_formatter']['dependencies'][] = "stanford_profile_styles/paragraph.react_paragraphs";
  }
}

/**
 * Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter().
 */
function stanford_profile_styles_field_widget_multivalue_paragraphs_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
  $elements['#attached']['library'][] = 'stanford_profile_styles/admin.field_widgets';
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function stanford_profile_styles_field_widget_smartdate_timezone_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
  $elements['#attached']['library'][] = 'stanford_profile_styles/admin.field_widgets';
}

/**
 * Implements hook_entity_display_build_alter().
 */
function stanford_profile_styles_entity_display_build_alter(&$build, $context) {
  if ($context['entity']->getEntityTypeId() != 'paragraph') {
    return;
  }
  $bundle = str_replace('stanford_', '', $context['entity']->bundle());
  // Add libraries that correspond to the current paragraph type. No need to
  // check for the existing library. No message is created if no library exists.
  $build['#attached']['library'][] = "stanford_profile_styles/paragraph.$bundle";
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function stanford_profile_styles_ckeditor_css_alter(array &$css, Editor $editor) {
  if (!$editor->hasAssociatedFilterFormat()) {
    return;
  }

  $known_formats = [
    'stanford_html',
    'stanford_minimal_html',
  ];

  if (in_array($editor->getFilterFormat()->id(), $known_formats)) {
    $css[] = drupal_get_path('module', 'stanford_profile_styles') . '/dist/css/base/admin/ckeditor.css';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Move your field or group of fields to the node form options vertical tabs.
 */
function stanford_profile_styles_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // This has to go through process so that the vertical tabs are rendered.
  $form["#process"][] = "stanford_profile_styles_node_form_wide";
}

/**
 * Moves the advanced group down to below the content as vertical tabs.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state array.
 *
 * @return array
 *   The altered form.
 */
function stanford_profile_styles_node_form_wide(array $form, FormStateInterface &$form_state) {

  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if ($node->bundle() !== "stanford_page") {
    return $form;
  }

  $form['advanced']['#type'] = 'vertical_tabs';
  $form['meta']['#type'] = 'details';
  $form['meta']['#title'] = t('Publishing Information');
  $form['layout_selection']['#type'] = 'details';
  $form['layout_selection']['#title'] = t('Layout Options');
  $form['layout_selection']['#group'] = "advanced";
  $form['layout_selection']['#weight'] = -11;
  $form['#attached']['library'][] = 'stanford_profile_styles/admin.node_forms';

  return $form;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function stanford_profile_styles_preprocess_field(&$variables) {
  $wysiwyg_fields = ['text', 'text_with_summary', 'text_long'];
  if (in_array($variables['field_type'], $wysiwyg_fields)) {
    $variables['attributes']['class'][] = 'su-wysiwyg-text';
    $variables['#attached']['library'][] = 'stanford_profile_styles/paragraph.wysiwyg';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function stanford_profile_styles_preprocess_field__react_paragraph_row(&$variables) {
  $count = count($variables['items']);
  $variables['attributes']['class'][] = "container-$count-items";
  $variables['attributes']['class'][] = 'flex-container';
  $variables['attributes']['data-item-count'][] = $count;

  foreach ($variables['items'] as &$item) {
    /** @var \Drupal\paragraphs\ParagraphInterface $entity */
    $entity = $item['content']['#paragraph'];

    if ($width = $entity->getBehaviorSetting('react', 'width')) {
      if ($item['attributes'] instanceof Attribute) {
        $item['attributes']->addClass("flex-$width-of-12");
        continue;
      }
      $item['attributes']['class'][] = "flex-$width-of-12";
    }
  }
}

/**
 * Implements hook_preprocess_block__config_pages_block().
 */
function stanford_profile_styles_preprocess_block__config_pages_block(&$variables) {

  // Alter the styles and values for the config form blocks.
  $config_page = $variables['content']['#config_pages'];
  $type = $config_page->bundle();

  // SUPER! Footer!
  if ($type == "stanford_super_footer") {
    $variables['attributes']['class'][] = 'block-config-pages-super-footer';
    $variables['#attached']['library'][] = 'stanford_profile_styles/blocks.config_pages.super-footer';
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function stanford_profile_styles_preprocess_ds_entity_view(&$variables) {
  if (empty($variables['content']['#entity']) || !($variables['content']['#entity'] instanceof ContentEntityInterface)) {
    return;
  }
  $entity = $variables['content']['#entity'];
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('ds-entity--' . $entity->getEntityTypeId());
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('ds-entity--' . $entity->bundle());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function stanford_profile_styles_preprocess_colorbox_formatter(&$variables) {
  $variables['#attached']['library'][] = 'stanford_profile_styles/colorbox';
}

/**
 * Implements hook_views_pre_render().
 */
function stanford_profile_styles_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'search') {
    $view->element['#attached']['library'][] = 'stanford_profile_styles/views.search';
  }

  if (isset($view) && ($view->storage->id() == 'taxonomy_term_pages')) {
    $view->element['#attached']['library'][] = 'stanford_person/views';
  }
}
