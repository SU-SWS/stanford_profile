<?php

/**
 * @file
 * stanford_profile.install
 */

/**
 * Save the system pages from the original config values into state.
 */
function stanford_profile_update_8002() {
  $state = \Drupal::state();
  $state->set('stanford_profile.403_page', '/node/3');
  $state->set('stanford_profile.404_page', '/node/2');
  $state->set('stanford_profile.front_page', '/node/1');
}

/**
 * Create the new layout paragraph type.
 */
function stanford_profile_update_9000(&$sandbox) {
  \Drupal::service('module_installer')->install([
    'layout_paragraphs',
    'stanford_layout_paragraphs',
  ]);
  $plugins = [
    'layout_paragraphs' => [
      'enabled' => TRUE,
      'available_layouts' => [
        'layout_paragraphs_1_column' => '1 Column',
        'layout_paragraphs_2_column' => '2 Column',
        'layout_paragraphs_3_column' => '3 Column',
      ],
    ],
  ];

  /** @var \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type */
  $paragraph_type = \Drupal::entityTypeManager()
    ->getStorage('paragraphs_type')
    ->create([
      'uuid' => 'c935e784-07eb-4fbf-afab-f687901abe5a',
      'id' => 'stanford_layout',
      'label' => 'Layout',
    ]);
  $paragraph_type->set('behavior_plugins', $plugins);
  $paragraph_type->save();

}

/**
 * Install Claro theme and uninstall Seven.
 */
function stanford_profile_update_9001() {
  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
  $theme_installer = \Drupal::service('theme_installer');
  $theme_installer->install(['claro']);
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('admin', 'claro')
    ->save();
  $theme_installer->uninstall(['seven']);
}

/**
 * Migrate Basic Page react paragraphs to layout paragraphs.
 */
function stanford_profile_update_9005(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_page')
      ->sort('created', 'ASC')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }
  drupal_static_reset();
  $row_storage = \Drupal::entityTypeManager()->getStorage('paragraph_row');
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $node_ids = array_splice($sandbox['nids'], 0, 25);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $delete_entities = [];
  foreach ($nodes as $node) {
    $new_components = [];
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row */
    foreach ($node->get('su_page_components') as $row) {
      $row_entity = $row_storage->load($row->get('target_id')->getString());
      $delete_entities[] = $row_entity;
      $number_of_items = $row_entity->get('su_page_components')->count();
      $layout_id = "layout_paragraphs_{$number_of_items}_column";

      $new_row_entity = $paragraph_storage->create(['type' => 'stanford_layout']);
      $new_row_entity->setBehaviorSettings('layout_paragraphs', [
        'layout' => $layout_id,
        'config' => ['label' => ''],
        'parent_uuid' => NULL,
        'region' => NULL,
      ]);
      $new_row_entity->save();

      $new_components[] = [
        'target_id' => $new_row_entity->id(),
        'target_revision_id' => $new_row_entity->getRevisionId(),
      ];

      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row_item */
      foreach ($row_entity->get('su_page_components') as $delta => $row_item) {
        /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
        $paragraph = $paragraph_storage->load($row_item->get('target_id')
          ->getString());
        $behaviors = $paragraph->getAllBehaviorSettings();
        unset($behaviors['react']);
        $behaviors['layout_paragraphs'] = [
          'parent_uuid' => $new_row_entity->uuid(),
          'region' => _stanford_profile_update_9005_get_item_region($delta, $layout_id),
        ];
        $paragraph->setParentEntity($node, 'su_page_components');
        $paragraph->setAllBehaviorSettings($behaviors);
        $paragraph->save();

        $new_components[] = [
          'target_id' => $paragraph->id(),
          'target_revision_id' => $paragraph->getRevisionId(),
        ];
      }
    }

    $node->set('su_page_components', $new_components)->save();
  }
  foreach ($delete_entities as $entity) {
    $entity->delete();
  }
  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Migrate Publications react paragraphs to layout paragraphs.
 */
function stanford_profile_update_9006(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_publication')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $row_storage = \Drupal::entityTypeManager()->getStorage('paragraph_row');
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $node_ids = array_splice($sandbox['nids'], 0, 25);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $delete_entities = [];
  foreach ($nodes as $node) {
    $new_components = [];
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row */
    foreach ($node->get('su_publication_components') as $row) {
      $row_entity = $row_storage->load($row->get('target_id')->getString());
      $delete_entities[] = $row_entity;
      $number_of_items = $row_entity->get('su_pubs_components')->count();
      $layout_id = "layout_paragraphs_{$number_of_items}_column";

      $new_row_entity = $paragraph_storage->create(['type' => 'stanford_layout']);
      $new_row_entity->setBehaviorSettings('layout_paragraphs', [
        'layout' => $layout_id,
        'config' => ['label' => ''],
        'parent_uuid' => NULL,
        'region' => NULL,
      ]);
      $new_row_entity->save();

      $new_components[] = [
        'target_id' => $new_row_entity->id(),
        'target_revision_id' => $new_row_entity->getRevisionId(),
      ];

      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row_item */
      foreach ($row_entity->get('su_pubs_components') as $delta => $row_item) {
        /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
        $paragraph = $paragraph_storage->load($row_item->get('target_id')
          ->getString());
        $behaviors = $paragraph->getAllBehaviorSettings();
        unset($behaviors['react']);
        $behaviors['layout_paragraphs'] = [
          'parent_uuid' => $new_row_entity->uuid(),
          'region' => _stanford_profile_update_9005_get_item_region($delta, $layout_id),
        ];
        $paragraph->setParentEntity($node, 'su_publication_components');
        $paragraph->setAllBehaviorSettings($behaviors);
        $paragraph->save();

        $new_components[] = [
          'target_id' => $paragraph->id(),
          'target_revision_id' => $paragraph->getRevisionId(),
        ];
      }
    }

    $node->set('su_publication_components', $new_components)->save();
  }
  foreach ($delete_entities as $entity) {
    $entity->delete();
  }
  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Get the items new region in the layout paragraphs layout.
 *
 * @param int $delta
 *   Position of the item in the row.
 * @param string $layout_id
 *   Parent layout id.
 *
 * @return string
 *   New region.
 */
function _stanford_profile_update_9005_get_item_region(int $delta, string $layout_id): string {
  switch ($layout_id) {
    case 'layout_paragraphs_2_column':
      return $delta ? 'right' : 'left';

    case 'layout_paragraphs_3_column':
      $delta_regions = ['left', 'main', 'right'];
      return $delta_regions[$delta];
  }
  return 'main';
}

/**
 * Update pages with custom layout builder settings.
 */
function stanford_profile_update_9007(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('layout_builder__layout', NULL, 'IS NOT NULL')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 25);
  $nodes = $node_storage->loadMultiple($node_ids);

  $convert_fields = [
    'field_block:node:stanford_event:su_event_components',
    'field_block:node:stanford_event_series:su_event_series_components',
    'field_block:node:stanford_news:su_news_components',
    'field_block:node:stanford_page:su_page_components',
    'field_block:node:stanford_person:su_person_components',
    'field_block:node:stanford_person:su_person_components',
    'field_block:node:stanford_publication:su_publication_components',
  ];
  foreach ($nodes as $node) {
    $save_node = FALSE;
    /** @var \Drupal\layout_builder\Field\LayoutSectionItemList $layout */
    $layout = $node->get('layout_builder__layout');
    foreach ($layout->getSections() as $section) {
      foreach ($section->getComponents() as $component) {
        $config = $component->get('configuration');
        if (in_array($config['id'], $convert_fields)) {
          $config['formatter']['type'] = 'layout_paragraphs';
          $config['formatter']['settings'] = ['view_mode' => 'default'];
          $component->setConfiguration($config);
          $save_node = TRUE;
        }
      }
    }
    if ($save_node) {
      $node->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Uninstall Stable theme.
 */
function stanford_profile_update_9100(&$sandbox) {
  \Drupal::service('theme_installer')->uninstall(['stable']);
}
